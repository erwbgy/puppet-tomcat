{"name":"Puppet-tomcat","tagline":"","body":"# puppet-tomcat\r\n\r\nPuppet module to install Apache Tomcat and run instances as Runit services\r\nunder one or more users.\r\n\r\nThe recommended usage is to place the configuration in hiera and just:\r\n\r\n    include tomcat\r\n\r\nExample hiera config:\r\n\r\n    tomcat::config:\r\n      admin_user: 'admin'\r\n    \r\n    tomcat::cpu_affinity: '0,1'\r\n    \r\n    tomcat::files:\r\n      lib/postgresql-9.2-1002.jdbc4.jar:\r\n        source:   'puppet:///files/jdbc/postgresql-9.2-1002.jdbc4.jar'\r\n    \r\n    tomcat::templates:\r\n      conf/tomcat-users.xml:\r\n        mode:     '0440'\r\n        template: '/var/lib/puppet/files/tomcat/myapp/tomcat-users.xml.erb'\r\n    \r\n    tomcat::group:     'tomcat'\r\n    \r\n    tomcat::java_home: '/usr/java/jdk1.7.0_09'\r\n    \r\n    tomcat::java_opts: '-Xms1536m -Xmx1536m -XX:MaxPermSize=512m'\r\n\r\n    tomcat::jolokia_version: '1.1.1'\r\n    \r\n    tomcat::version:   '7.0.37'\r\n    \r\n    tomcat::instances:\r\n      tomcat1:\r\n        basedir:         '/apps/tomcat1'\r\n        bind_address:    %{ipaddress_eth0_1}\r\n        localhost:       '127.0.0.101'\r\n        logdir:          '/apps/tomcat1/logs'\r\n        jolokia:         'true'\r\n        jolokia_address: %{ipaddress_eth0_1}\r\n        jolokia_port:    '8190'\r\n        config:\r\n          admin_user:    'fbloggs'\r\n        dependencies:\r\n          - '/apps/activemq1/service/activemq'\r\n      tomcat2:\r\n        basedir:         '/apps/tomcat2'\r\n        bind_address:    %{ipaddress_eth0_2}\r\n        localhost:       '127.0.0.102'\r\n        logdir:          '/apps/tomcat2/logs'\r\n        config:\r\n          admin_user:    'jbloggs'\r\n\r\n## tomcat parameters\r\n\r\n*basedir*: The base installation directory. Default: '/opt/tomcat'\r\n\r\n*bind_address*: The IP or hostname to bind listen ports to. Default: $fqdn\r\n\r\n*check_port*: The port that the instance must be listening on (bound to\r\nbind_address) for it to be considered up. Default: '8080'\r\n\r\n*config*: A hash of additional configuration variables that will be set when\r\ntemplates are processed.\r\n\r\n*dependencies*: A list of Runit service directories whose services must be up\r\nbefore the Tomcat service is started.\r\n\r\n*cpu_affinity*: Enable CPU affinity to be set to only run processes on specific\r\nCPU cores - for example '0,1' to only run processes on the first two cores.\r\n\r\n*files*: A hash of configuration files to install - see below\r\n\r\n*filestore*: The Puppet filestore location where the Tomcat tarball and Jolokia\r\nwar file are downloaded from. Default: 'puppet:///files/tomcat'\r\n\r\n*gclog_enabled*:  Whether or not Garbage Collector logging is enabled. Default:\r\n'false'\r\n\r\n*gclog_numfiles*: The number of garbage collector log files to keep. Default:\r\n'5'\r\n\r\n*gclog_filesize*: The maximum size of a garbage collector log file before it is\r\nrotated. Default: '100M'\r\n\r\n*group*: The user''s primary group. Default: 'tomcat',\r\n\r\n*java_home*: The base directory of the JDK installation to be used. Default:\r\n'/usr/java/latest'\r\n\r\n*java_opts*: Additional java command-line options to pass to the startup script\r\n\r\n*jolokia*: Whether or not to install the jolokia war file and configure a\r\nseparate service to run it. Default: false\r\n\r\n*jolokia_address*: The address that the jolokia HTTP service listens on.\r\nDefault: 'localhost'\r\n\r\n*jolokia_port*: The port that the jolokia HTTP service listens on. Default:\r\n'8190'\r\n\r\n*jolokia_version*: The version of the jolokia war file to download and install.\r\nDefault: '1.1.1'\r\n\r\n*localhost*: The localhost address to bind listen ports to. Default: 'localhost'\r\n\r\n*logdir*: The base log directory. Default: '/var/logs/tomcat'\r\n\r\n*min_mem*: The minimum heap size allocated by the JVM. Default: 1024m\r\n\r\n*max_mem*: The maximum heap size allocated by the JVM. Default: 2048m\r\n\r\n*mode*: The permissions to create files with (eg. 0444).\r\n\r\n*remove_docs*: Whether or not to remove the Tomcat docs under webapps. Default: true\r\n\r\n*remove_examples*: Whether or not to remove the Tomcat examples under webapps. Default: true\r\n\r\n*templates*: A hash of configuration templates to process and install - see below\r\n\r\n*ulimit_nofile*: The maximum number of open file descriptors the java process\r\nis allowed.  Default is '$(ulimit -H -n)' which sets the value to the hard\r\nlimit in /etc/security/limits.conf (or equivalent) for the user.\r\n\r\n*version*: The version of the product to install (eg. 7.0.37). **Required**.\r\n\r\n*workspace*: A temporary directory to unpack install tarballs into. Default:\r\n'/root/tomcat'\r\n\r\n## tomcat::instance parameters\r\n\r\n*title*: The user the Tomcat instance runs as\r\n\r\nPlus all of the parameters specified in 'tomcat parameters' above\r\n\r\n## Config files\r\n\r\nFiles or templates for each of the Tomcat instances can be delivered via\r\nPuppet.  The former are delivered as-is while the latter are processed as ERB\r\ntemplates before being delivered.\r\n\r\nFor example configuration could be delivered using for instances running as the\r\ntomcat1 and tomcat2 users with:\r\n\r\n    tomcat::config:\r\n      admin_user: 'admin'\r\n      admin_pass: 'admin'\r\n\r\n    tomcat::files:\r\n      conf/tomcat-users.xml:\r\n        source: 'puppet:///files/tomcat/dev/context.xml'\r\n      \r\n    tomcat:\r\n      tomcat1:\r\n        config:\r\n          admin_pass: 'tinstaafl'\r\n        templates:\r\n          conf/tomcat-users.xml:\r\n            template: '/etc/puppet/templates/tomcat/dev1/tomcat-users.xml.erb'\r\n      tomcat2:\r\n        config:\r\n          admin_pass: 'timtowtdi'\r\n        templates:\r\n          conf/tomcat-users.xml:\r\n            template: '/etc/puppet/templates/tomcat/dev2/tomcat-users.xml.erb'\r\n\r\nValues set at the tomcat level as set for all instances so both the tomcat1 and\r\ntomcat2 instance would get the same context.xml file.  Each instance would get\r\ntheir own tomcat-users.xml file based on the template specified with instance\r\nvariables (like basedir and logdir) and config variables (like admin_user and\r\nadmin_pass above) substituted.\r\n\r\nFor example:\r\n\r\n    <user username=\"<%= @admin_user %>\"\r\n          password=\"<%= @admin_pass %>\"\r\n          roles=\"tomcat,manager-gui\"/>\r\n\r\nAll files and templates are relative to the product installation.  For example\r\nif the product installation is '/opt/tomcat/apache-tomcat-7.0.37' then the full\r\npath to the 'tomcat-users.xml' file would be\r\n'/opt/tomcat/apache-tomcat-7.0.37/conf/tomcat-users.xml'.\r\n\r\nNote that the path specified by the 'template' parameter is on the Puppet\r\nmaster.\r\n\r\n## Default templates\r\n\r\nThere are default templates for conf/server.xml to listen on the specified\r\nbind_address and for conf/logging.properties to use the specified logdir.\r\nThese defaults are only used if the template is not specified using the\r\ntemplates configuration.\r\n\r\n## Product files\r\n\r\nBy default the product tar file (eg. 'apache-tomcat-7.0.32.tar.gz') is expected\r\nto be found under a 'tomcat' directory of the 'files' file store.  For example\r\nif /etc/puppet/fileserver.conf has:\r\n\r\n    [files]\r\n    path /var/lib/puppet/files\r\n\r\nthen put the tar file in /var/lib/puppet/files/tomcat.  Any files specified\r\nwith the 'files' parameter can also be placed in this directory, as can the\r\nJolokia war file.\r\n\r\nThis location can be changed by setting the 'filestore' parameter.\r\n\r\n## Monitoring\r\n\r\nThe jolokia parameters enable JMX statistics to be queried over HTTP - for example:\r\n\r\n    $ curl http://localhost:8190/jolokia/read/java.lang:type=Memory/HeapMemoryUsage\r\n    {\"timestamp\":1363883323,\"status\":200,\"request\":{\"mbean\":\"java.lang:type=Memory\"\r\n    ,\" attribute\":\"HeapMemoryUsage\",\"type\":\"read\"},\"value\":{\"max\":1908932608,\"commi\r\n    tted\":1029046272,\"init\":1073741824,\"used\":155889168}}\r\n\r\nTo limit what what can be accessed a jolokia-access.xml can be included in the\r\nwar file.  This is what I do to ensure read-only access:\r\n\r\n    $ cd /var/lib/puppet/files/tomcat\r\n    $ wget http://labs.consol.de/maven/repository/org/jolokia/jolokia-war/1.1.1/jolokia-war-1.1.1.war\r\n    $ vim jolokia-access.xml\r\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n    <restrict>\r\n      <commands>\r\n        <command>read</command>\r\n        <command>list</command>\r\n        <command>version</command>\r\n        <command>search</command>\r\n      </commands>\r\n      <http>\r\n        <method>get</method>\r\n      </http>\r\n    </restrict>\r\n    $ mkdir -p WEB-INF/classes\r\n    $ cp jolokia-access.xml WEB-INF/classes/\r\n    $ zip -u jolokia-war-1.1.1.war WEB-INF/classes/jolokia-access.xml\r\n    $ rm -rf WEB-INF\r\n\r\nSee http://www.jolokia.org/ for more information.\r\n\r\n## Dependencies\r\n\r\nIt must be possible to check the status (using 'sv stat') of each of the\r\nservice directories specified as dependencies.  This is problematic for\r\nservices running as different users as the supervise directory and supervise/ok\r\nfile are only accessible by the owner. \r\n\r\nOne way to resolve this is to add the user to the destination group and modify\r\nthe group permissions - for example:\r\n\r\n    $ usermod -a -G activemq tomcat1\r\n    $ cd /apps/activemq1/service/activemq\r\n    $ find . -follow -type d -name 'supervise' -exec chmod g+x {} \\;\r\n    $ find . -follow -type p -name 'ok' -exec chmod g+w {} \\;\r\n\r\nAnother way is to use ACLs to grant the user the required permissions - for example:\r\n\r\n    $ cd /apps/activemq1/service/activemq\r\n    $ find . -follow -type d -name 'supervise' -exec setfacl -m u:tomcat1:x {} \\;\r\n    $ find . -follow -type p -name 'ok' -exec setfacl -m u:tomcat1:w {} \\; \r\n\r\n## Support\r\n\r\nLicense: Apache License, Version 2.0\r\n\r\nGitHub URL: https://github.com/erwbgy/puppet-tomcat\r\n","google":"UA-37513727-1","note":"Don't delete this file! It's used internally to help with page regeneration."}